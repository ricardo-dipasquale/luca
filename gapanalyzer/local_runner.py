"""
Local runner for GapAnalyzer agent debugging.

This script allows running the GapAnalyzer agent locally without the A2A framework
for debugging and development purposes. It provides a simple CLI interface to
interact with the agent directly.
"""
import asyncio
import json
import logging
import sys
from typing import Dict, Any, Optional
from uuid import uuid4

from gapanalyzer.agent import GapAnalyzerAgent
from gapanalyzer.schemas import StudentContext


# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class LocalGapAnalyzerRunner:
    """Local runner for debugging the GapAnalyzer agent."""
    
    def __init__(self):
        """Initialize the local runner."""
        try:
            self.agent = GapAnalyzerAgent()
            self.context_id = str(uuid4())
            logger.info("GapAnalyzer agent initialized successfully")
        except Exception as e:
            logger.error(f"Failed to initialize agent: {e}")
            raise
    
    def create_sample_context(self, question: str) -> StudentContext:
        """
        Create a sample context for testing.
        
        Args:
            question: Student's question
            
        Returns:
            StudentContext with sample data
        """
        return StudentContext(
            student_question=question,
            conversation_history=[],
            subject_name="Bases de Datos Relacionales",
            practice_context="""
            Pr√°ctica: 2 - Algebra Relacional: Resoluci√≥n de ejercicios en Algebra Relacional. Existen preguntas conceptuales que est√°n relacionados.
            
            Objetivo: Que los alumnos sean capaces de resolver situaciones problem√°ticas con √°lgebra relacional utilizando los preceptos dados en clase.
            
            Temas cubiertos:
            - Modelo Relacional
            - Algebra relacional: Operaciones, Pr√°ctica
            - Lenguajes relacionalmente completos
            - Consultas Algebra relacional
            """,
            exercise_context="""
            Ejercicio: 1.d - Nombre de los clientes que no han comprado nada
            
            Enunciado: Dado el siguiente esquema relacional de base de datos, resolver en √°lgebra relacional. Las claves de denotan con "(clave)":
            - CLIENTES (N¬∫ Cliente (clave), Nombre, Direcci√≥n, Tel√©fono, Ciudad)
            - PRODUCTO(Cod Producto (clave), Descripci√≥n, Precio)
            - VENTA(Cod Producto, N¬∫ Cliente, Cantidad, Id Venta (clave))
            """,
            solution_context="""
            Soluci√≥n esperada: [œÄ_{Nombre} (œÄ_{N¬∫ Cliente,Nombre} (CLIENTES) ‚àí œÄ_{N¬∫ Cliente,Nombre} (CLIENTES ‚ãà_{CLIENTES.N¬∫ Cliente=VENTA.N¬∫ Cliente} VENTA))]
            """,
            tips_context="""
            Tips nivel pr√°ctica:
            - Pensar bien qu√© operaci√≥n (o juego de operaciones) es central en la resoluci√≥n del ejercicio.
            - No confundir la sem√°ntica de las operaciones: Por ejemplo, si un problema tiene en su esencia la resoluci√≥n de una diferencia de conjuntos, se espera que que el alumno utilice la diferencia de conjuntos y no otros caminos como por ejemplo la selecci√≥n sobre un subconjunto del producto cartesiano, la selecci√≥n de los outer join nulos, etc.
            - La notaci√≥n que vamos a usar para √°lgebra relacional se muestra a continuaci√≥n: œÄ_{Nombre} (œÉ_{Ciudad= ‚Ä≤Buenos Aires‚Ä≤} (CLIENTES)) donde se quiso aplicar la proyecci√≥n por el campo Nombre a la Selecci√≥n con el filtro Ciudad='Buenos Aires' a la relaci√≥n CLIENTES", "En este curso no utilizamos el operador Gamma (Œ≥) para las funciones de agregaci√≥n, utilizamos la F g√≥tica (F) con la siguiente notaci√≥n _{camposGroup}F_{funcionesAgregadas} (Relacion)
            - Hacer √©nfasis en que las operaciones de conjuntos como la diferencia de conjuntos, la uni√≥n o la intersecci√≥n requieren que los dos conjuntos o relaciones tengan el mismo esquema o cabecera
            - Siempre que se haga una intersecci√≥n, diferencia, o cociente de conjunto, verificar que se est√©n utilizando los campos clave, ya que al poder incluir valores repetidos, el resultado puede ser incorrecto si se usan campos que no tienen restricci√≥n de unicidad.
            - Tener en cuenta que los alumnos pueden llegar al mismo resultado descomponiendo las partes, es decir ir haciendo asignaciones a Relaciones parciales y expresando la soluci√≥n en funci√≥n de las Relaciones parciales, una vez que lleguen a un buen resultado as√≠, es conveniente sugerirles como pr√°ctica adicional que intenten consolidar una √∫nica sentencia de Algebra Relacional para que vean c√≥mo quedar√≠a.
            - En una suceci√≥n de operaciones de junta, cuando en alguna de las relaciones se aplica una selecci√≥n, preferimos que la selecci√≥n se aplique al conjunto de las juntas completo, ya que luego cuando los alumnos representan en SQL tienden a hacer sub-queries dentro de las juntas, lo que puede ser contraproducente. Igualmente damos por v√°lida en Algebra Relacional cualquiera de las dos maneras.
            - Desaconsejamos el uso de la junta natural (NATURAL JOIN) por lo que expresaremos todas las recomendaciones y soluciones especificando el criterio de junta. El motivo para desaconsejar el uso de Natural Join es el de mantenibilidad de los sistemas: Hoy funciona, pero no sabemos si ma√±ana se introducen campos nuevos en las relaciones, lo que destruir√≠a el buen funcionamiento de las expresiones AR/SQL)
            
            Tips nivel ejercicio:
            - Tener en cuenta que puede haber varias respuestas similares y est√°n bien
            - Los alumnos tienden a simplificar y a hacer una diferencia de conjuntos utilizando √∫nicamente la proyecci√≥n por el nombre del cliente. Esto presenta un problema porque en ning√∫n lugar dijimos que el Nombre es √∫nico. Si el alumno aclara que modifica el esquema relacional agregando una restricci√≥n de unicidad en la relaci√≥n Cliente por el campo Nombre, lo consideramos una respuesta correcta, caso contrario tiene que incluir el Identificador de Cliente (N¬∫ Cliente) en la diferencia de conjuntos-
            """
        )
    
    def create_custom_context(self) -> StudentContext:
        """
        Create a custom context based on user input.
        
        Returns:
            StudentContext with user-provided data
        """
        print("\n=== CONFIGURACI√ìN DE CONTEXTO PERSONALIZADO ===")
        
        question = input("Pregunta del estudiante: ").strip()
        if not question:
            question = "No s√© c√≥mo hacer bien un left join que traiga de clientes todos los registros y que del lado de ventas traiga los que tienen nulo, a≈õi me quedo con los clientes que no compraron cosas, no?"
        
        subject = input("Materia (default: Bases de Datos Relacionales): ").strip()
        if not subject:
            subject = "Bases de Datos Relacionales"
        
        practice = input("Contexto de pr√°ctica (default: usar ejemplo): ").strip()
        if not practice:
            practice = "Pr√°ctica sobre normalizaci√≥n de bases de datos"
        
        exercise = input("Contexto de ejercicio (default: usar ejemplo): ").strip()
        if not exercise:
            exercise = "Ejercicio de normalizaci√≥n de tablas"
        
        solution = input("Contexto de soluci√≥n (opcional): ").strip()
        tips = input("Tips del profesor (opcional): ").strip()
        
        return StudentContext(
            student_question=question,
            conversation_history=[],
            subject_name=subject,
            practice_context=practice,
            exercise_context=exercise,
            solution_context=solution or "No se proporcion√≥ soluci√≥n esperada",
            tips_context=tips or "No se proporcionaron tips adicionales"
        )
    
    async def run_analysis(self, context: StudentContext, stream: bool = True) -> Dict[str, Any]:
        """
        Run gap analysis with the given context.
        
        Args:
            context: Student context for analysis
            stream: Whether to show streaming output
            
        Returns:
            Final analysis result
        """
        print(f"\n=== INICIANDO AN√ÅLISIS DE GAPS ===")
        print(f"Pregunta: {context.student_question}")
        print(f"Materia: {context.subject_name}")
        print("=" * 50)
        
        if stream:
            print("\n=== PROGRESO DEL AN√ÅLISIS ===")
            final_result = None
            
            async for chunk in self.agent.stream(context.student_question, self.context_id):
                if chunk.get('is_task_complete', False):
                    final_result = chunk
                    print(f"\n‚úÖ {chunk.get('content', 'An√°lisis completado')}")
                else:
                    print(f"üîÑ {chunk.get('content', 'Procesando...')}")
            
            return final_result
        else:
            # Non-streaming analysis (direct workflow call)
            result = await self.agent.workflow.run_analysis(context, self.context_id)
            formatted_response = self.agent.format_gap_analysis_response(result)
            
            return {
                'is_task_complete': True,
                'content': formatted_response,
                'structured_response': result
            }
    
    def print_result(self, result: Dict[str, Any]):
        """
        Print the analysis result in a formatted way.
        
        Args:
            result: Analysis result from the agent
        """
        print("\n" + "=" * 60)
        print("RESULTADO DEL AN√ÅLISIS")
        print("=" * 60)
        
        content = result.get('content', 'No se pudo obtener resultado')
        print(content)
        
        # Print structured response if available
        structured = result.get('structured_response')
        if structured and hasattr(structured, 'detailed_analysis'):
            analysis = structured.detailed_analysis
            print(f"\nüìä ESTAD√çSTICAS:")
            print(f"   ‚Ä¢ Gaps encontrados: {len(analysis.identified_gaps)}")
            print(f"   ‚Ä¢ Confianza: {analysis.confidence_score:.1%}")
            print(f"   ‚Ä¢ Iteraciones de feedback: {getattr(analysis, 'feedback_iterations', 0)}")
    
    async def interactive_mode(self):
        """Run the agent in interactive mode for continuous testing."""
        print("\nüîç MODO INTERACTIVO - GapAnalyzer Local Runner")
        print("Escribe 'exit' para salir, 'help' para ayuda")
        
        while True:
            print("\n" + "-" * 50)
            print("OPCIONES:")
            print("1. Usar contexto de ejemplo")
            print("2. Crear contexto personalizado")
            print("3. An√°lisis r√°pido (sin streaming)")
            print("4. Mostrar configuraci√≥n actual")
            print("5. Ayuda")
            print("exit. Salir")
            
            choice = input("\nSelecciona una opci√≥n: ").strip().lower()
            
            if choice in ['exit', 'quit', 'q']:
                print("üëã ¬°Hasta luego!")
                break
            elif choice == '1':
                question = input("Pregunta del estudiante (o Enter para usar ejemplo): ").strip()
                if not question:
                    question = "No s√© c√≥mo hacer bien un left join que traiga de clientes todos los registros y que del lado de ventas traiga los que tienen nulo, as√≠ me quedo con los clientes que no compraron cosas, no?"

                context = self.create_sample_context(question)
                result = await self.run_analysis(context, stream=True)
                self.print_result(result)
                
            elif choice == '2':
                context = self.create_custom_context()
                result = await self.run_analysis(context, stream=True)
                self.print_result(result)
                
            elif choice == '3':
                question = input("Pregunta del estudiante: ").strip()
                if not question:
                    question = "¬øCu√°l es la diferencia entre 2FN y 3FN?"
                
                context = self.create_sample_context(question)
                result = await self.run_analysis(context, stream=False)
                self.print_result(result)
                
            elif choice == '4':
                print(f"\nüìã CONFIGURACI√ìN ACTUAL:")
                print(f"   ‚Ä¢ Context ID: {self.context_id}")
                print(f"   ‚Ä¢ Agent type: {type(self.agent).__name__}")
                print(f"   ‚Ä¢ LLM model: {getattr(self.agent.llm, 'model_name', 'Unknown')}")
                
            elif choice == '5' or choice == 'help':
                print(f"\nüìñ AYUDA:")
                print(f"   ‚Ä¢ Opci√≥n 1: Usa un contexto predefinido de normalizaci√≥n")
                print(f"   ‚Ä¢ Opci√≥n 2: Te permite crear tu propio contexto paso a paso")
                print(f"   ‚Ä¢ Opci√≥n 3: An√°lisis directo sin mostrar progreso")
                print(f"   ‚Ä¢ Streaming: Muestra el progreso del an√°lisis en tiempo real")
                print(f"   ‚Ä¢ Non-streaming: Ejecuta todo el an√°lisis y muestra resultado final")
                
            else:
                print("‚ùå Opci√≥n no v√°lida. Escribe 'help' para ver las opciones.")


async def main():
    """Main entry point for the local runner."""
    try:
        runner = LocalGapAnalyzerRunner()
        
        # Check command line arguments
        if len(sys.argv) > 1:
            if sys.argv[1] == '--interactive' or sys.argv[1] == '-i':
                await runner.interactive_mode()
            elif sys.argv[1] == '--help' or sys.argv[1] == '-h':
                print_help()
            else:
                # Single question mode
                question = " ".join(sys.argv[1:])
                context = runner.create_sample_context(question)
                result = await runner.run_analysis(context)
                runner.print_result(result)
        else:
            # Default to interactive mode
            await runner.interactive_mode()
            
    except KeyboardInterrupt:
        print("\n\nüëã An√°lisis interrumpido por el usuario")
    except Exception as e:
        logger.error(f"Error en el runner local: {e}")
        print(f"\n‚ùå Error: {e}")
        sys.exit(1)


def print_help():
    """Print help information."""
    print("""
üîç GapAnalyzer Local Runner - Herramienta de debugging

USAGE:
    python -m gapanalyzer.local_runner [OPTIONS] [QUESTION]

OPTIONS:
    -i, --interactive    Modo interactivo con men√∫ de opciones
    -h, --help          Muestra esta ayuda

EXAMPLES:
    # Modo interactivo
    python -m gapanalyzer.local_runner --interactive
    
    # Pregunta directa
    python -m gapanalyzer.local_runner "¬øC√≥mo normalizo esta tabla?"
    
    # Sin argumentos (modo interactivo por defecto)
    python -m gapanalyzer.local_runner

CARACTER√çSTICAS:
    ‚Ä¢ Debugging local sin framework A2A
    ‚Ä¢ Streaming de progreso en tiempo real
    ‚Ä¢ Contexto personalizable o predefinido
    ‚Ä¢ An√°lisis completo de gaps educativos
    ‚Ä¢ Integraci√≥n con observabilidad Langfuse
    """)


if __name__ == "__main__":
    asyncio.run(main())