version: '3.8'

services:
  neo4j:
    image: neo4j:5.26.1
    container_name: neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - ./db/data:/data
      - ./db/logs:/logs
      - ./db/import:/var/lib/neo4j/import
      - ./db/plugins:/plugins
    environment:
      # Authentication using environment variables
      NEO4J_AUTH: "${NEO4J_USERNAME}/${NEO4J_PASSWORD}"
      
      # APOC configuration
      NEO4J_apoc_export_file_enabled: "true"
      NEO4J_apoc_import_file_enabled: "true"
      NEO4J_apoc_import_file_use__neo4j__config: "true"
      
      # Plugins
      NEO4JLABS_PLUGINS: '["apoc","graph-data-science"]'
      
      # Security settings
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*"
    restart: unless-stopped
    networks:
      - luca-network

  llm-graph-builder:
    image: shivansh371/llm-graph-builder-backend
    container_name: llm-graph-builder-backend
    ports:
      - "8000:8000"
    depends_on:
      - neo4j
    environment:
      # Embedding configuration
      EMBEDDING_MODEL: "openai"
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      RAGAS_EMBEDDING_MODEL: "openai"
      IS_EMBEDDING: "TRUE"
      KNN_MIN_SCORE: "0.94"
      
      # Feature flags
      GEMINI_ENABLED: "False"
      GCP_LOG_METRICS_ENABLED: "False"
      
      # Processing configuration
      NUMBER_OF_CHUNKS_TO_COMBINE: "6"
      UPDATE_GRAPH_CHUNKS_PROCESSED: "20"
      CHUNKS_TO_BE_CREATED: "200"
      
      # Neo4j connection (internal docker network)
      NEO4J_URI: "bolt://neo4j:7687"
      NEO4J_USERNAME: "${NEO4J_USERNAME}"
      NEO4J_PASSWORD: "${NEO4J_PASSWORD}"
      NEO4J_DATABASE: "neo4j"
      
      # AWS (empty for now)
      AWS_ACCESS_KEY_ID: ""
      AWS_SECRET_ACCESS_KEY: ""
      
      # LangChain (empty for now)
      LANGCHAIN_API_KEY: ""
      LANGCHAIN_PROJECT: ""
      LANGCHAIN_TRACING_V2: ""
      LANGCHAIN_ENDPOINT: ""
      
      # Storage configuration
      GCS_FILE_CACHE: "False"
      NEO4J_USER_AGENT: ""
      ENABLE_USER_AGENT: ""
      LLM_MODEL_CONFIG_model_version: ""
      
      # Entity embeddings
      ENTITY_EMBEDDING: "TRUE"
      DUPLICATE_SCORE_VALUE: "0.97"
      DUPLICATE_TEXT_DISTANCE: "3"
      
      # Default model
      DEFAULT_DIFFBOT_CHAT_MODEL: " "
      
      # LLM Model configurations (using OPENAI_API_KEY from .envrc)
      LLM_MODEL_CONFIG_openai_gpt_3.5: "gpt-3.5-turbo-0125,${OPENAI_API_KEY}"
      LLM_MODEL_CONFIG_openai_gpt_4o_mini: "gpt-4o-mini,${OPENAI_API_KEY}"
      LLM_MODEL_CONFIG_openai_gpt_4o: "gpt-4o,${OPENAI_API_KEY}"
      LLM_MODEL_CONFIG_gemini_1.5_pro: "gemini-1.5-pro-002"
      LLM_MODEL_CONFIG_gemini_1.5_flash: "gemini-1.5-flash-002"
      LLM_MODEL_CONFIG_diffbot: "diffbot,diffbot_api_key"
      LLM_MODEL_CONFIG_azure_ai_gpt_35: "azure_deployment_name,azure_endpoint,azure_api_key,api_version"
      LLM_MODEL_CONFIG_azure_ai_gpt_4o: "gpt-4o,https://YOUR-ENDPOINT.openai.azure.com/,azure_api_key,api_version"
      LLM_MODEL_CONFIG_groq_llama3_70b: "model_name,base_url,groq_api_key"
      LLM_MODEL_CONFIG_anthropic_claude_3_5_sonnet: "model_name,anthropic_api_key"
      LLM_MODEL_CONFIG_fireworks_llama_v3_70b: "model_name,fireworks_api_key"
      LLM_MODEL_CONFIG_bedrock_claude_3_5_sonnet: "model_name,aws_access_key_id,aws_secret__access_key,region_name"
      LLM_MODEL_CONFIG_deepseek: "deepseek-r1,http://localhost:11434,http://localhost:11434"
      
      # Additional configuration
      YOUTUBE_TRANSCRIPT_PROXY: "https://user:pass@domain:port"
      EFFECTIVE_SEARCH_RATIO: "5"
      GRAPH_CLEANUP_MODEL: "openai_gpt_4o"
      BEDROCK_EMBEDDING_MODEL: "model_name,aws_access_key,aws_secret_key,region_name"
      LLM_MODEL_CONFIG_bedrock_nova_micro_v1: "model_name,aws_access_key,aws_secret_key,region_name"
      LLM_MODEL_CONFIG_bedrock_nova_lite_v1: "model_name,aws_access_key,aws_secret_key,region_name"
      LLM_MODEL_CONFIG_bedrock_nova_pro_v1: "model_name,aws_access_key,aws_secret_key,region_name"
    restart: unless-stopped
    networks:
      - luca-network
  langfuse-worker:
    image: docker.io/langfuse/langfuse-worker:3
    restart: always
    depends_on: &langfuse-depends-on
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    ports:
      - 127.0.0.1:3030:3030
    environment: &langfuse-worker-env
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      SALT: ${SALT}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      TELEMETRY_ENABLED: ${TELEMETRY_ENABLED:-true}
      LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES: ${LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES:-true}
      CLICKHOUSE_MIGRATION_URL: ${CLICKHOUSE_MIGRATION_URL:-clickhouse://clickhouse:9000}
      CLICKHOUSE_URL: ${CLICKHOUSE_URL:-http://clickhouse:8123}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-clickhouse}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_CLUSTER_ENABLED: ${CLICKHOUSE_CLUSTER_ENABLED:-false}
      LANGFUSE_USE_AZURE_BLOB: ${LANGFUSE_USE_AZURE_BLOB:-false}
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: ${LANGFUSE_S3_EVENT_UPLOAD_BUCKET:-langfuse}
      LANGFUSE_S3_EVENT_UPLOAD_REGION: ${LANGFUSE_S3_EVENT_UPLOAD_REGION:-auto}
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: ${LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID:-minio}
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: ${LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY:-miniosecret} # CHANGEME
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: ${LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT:-http://minio:9000}
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: ${LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE:-true}
      LANGFUSE_S3_EVENT_UPLOAD_PREFIX: ${LANGFUSE_S3_EVENT_UPLOAD_PREFIX:-events/}
      LANGFUSE_S3_MEDIA_UPLOAD_BUCKET: ${LANGFUSE_S3_MEDIA_UPLOAD_BUCKET:-langfuse}
      LANGFUSE_S3_MEDIA_UPLOAD_REGION: ${LANGFUSE_S3_MEDIA_UPLOAD_REGION:-auto}
      LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID: ${LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID:-minio}
      LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY: ${LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY:-miniosecret} # CHANGEME
      LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT: ${LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT:-http://localhost:9090}
      LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE: ${LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE:-true}
      LANGFUSE_S3_MEDIA_UPLOAD_PREFIX: ${LANGFUSE_S3_MEDIA_UPLOAD_PREFIX:-media/}
      LANGFUSE_S3_BATCH_EXPORT_ENABLED: ${LANGFUSE_S3_BATCH_EXPORT_ENABLED:-false}
      LANGFUSE_S3_BATCH_EXPORT_BUCKET: ${LANGFUSE_S3_BATCH_EXPORT_BUCKET:-langfuse}
      LANGFUSE_S3_BATCH_EXPORT_PREFIX: ${LANGFUSE_S3_BATCH_EXPORT_PREFIX:-exports/}
      LANGFUSE_S3_BATCH_EXPORT_REGION: ${LANGFUSE_S3_BATCH_EXPORT_REGION:-auto}
      LANGFUSE_S3_BATCH_EXPORT_ENDPOINT: ${LANGFUSE_S3_BATCH_EXPORT_ENDPOINT:-http://minio:9000}
      LANGFUSE_S3_BATCH_EXPORT_EXTERNAL_ENDPOINT: ${LANGFUSE_S3_BATCH_EXPORT_EXTERNAL_ENDPOINT:-http://localhost:9090}
      LANGFUSE_S3_BATCH_EXPORT_ACCESS_KEY_ID: ${LANGFUSE_S3_BATCH_EXPORT_ACCESS_KEY_ID:-minio}
      LANGFUSE_S3_BATCH_EXPORT_SECRET_ACCESS_KEY: ${LANGFUSE_S3_BATCH_EXPORT_SECRET_ACCESS_KEY:-miniosecret} # CHANGEME
      LANGFUSE_S3_BATCH_EXPORT_FORCE_PATH_STYLE: ${LANGFUSE_S3_BATCH_EXPORT_FORCE_PATH_STYLE:-true}
      LANGFUSE_INGESTION_QUEUE_DELAY_MS: ${LANGFUSE_INGESTION_QUEUE_DELAY_MS:-}
      LANGFUSE_INGESTION_CLICKHOUSE_WRITE_INTERVAL_MS: ${LANGFUSE_INGESTION_CLICKHOUSE_WRITE_INTERVAL_MS:-}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_AUTH: ${REDIS_AUTH}
      REDIS_TLS_ENABLED: ${REDIS_TLS_ENABLED:-false}
      REDIS_TLS_CA: ${REDIS_TLS_CA:-/certs/ca.crt}
      REDIS_TLS_CERT: ${REDIS_TLS_CERT:-/certs/redis.crt}
      REDIS_TLS_KEY: ${REDIS_TLS_KEY:-/certs/redis.key}
    networks:
      - luca-network

  langfuse-web:
    image: docker.io/langfuse/langfuse:3
    restart: always
    depends_on: *langfuse-depends-on
    ports:
      - 3000:3000
    environment:
      <<: *langfuse-worker-env
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      LANGFUSE_INIT_ORG_ID: ${LANGFUSE_INIT_ORG_ID:-}
      LANGFUSE_INIT_ORG_NAME: ${LANGFUSE_INIT_ORG_NAME:-}
      LANGFUSE_INIT_PROJECT_ID: ${LANGFUSE_INIT_PROJECT_ID:-}
      LANGFUSE_INIT_PROJECT_NAME: ${LANGFUSE_INIT_PROJECT_NAME:-}
      LANGFUSE_INIT_PROJECT_PUBLIC_KEY: ${LANGFUSE_INIT_PROJECT_PUBLIC_KEY:-}
      LANGFUSE_INIT_PROJECT_SECRET_KEY: ${LANGFUSE_INIT_PROJECT_SECRET_KEY:-}
      LANGFUSE_INIT_USER_EMAIL: ${LANGFUSE_INIT_USER_EMAIL:-}
      LANGFUSE_INIT_USER_NAME: ${LANGFUSE_INIT_USER_NAME:-}
      LANGFUSE_INIT_USER_PASSWORD: ${LANGFUSE_INIT_USER_PASSWORD:-}
    networks:
      - luca-network

  clickhouse:
    image: docker.io/clickhouse/clickhouse-server
    restart: always
    user: "101:101"
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
    volumes:
      - ./db/langfuse_clickhouse_data:/var/lib/clickhouse
      - ./db/langfuse_clickhouse_logs:/var/log/clickhouse-server
    ports:
      - 127.0.0.1:8123:8123
      - 127.0.0.1:9000:9000
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 1s
    networks:
      - luca-network

  minio:
    image: docker.io/minio/minio
    restart: always
    entrypoint: sh
    # create the 'langfuse' bucket before starting the service
    command: -c 'mkdir -p /data/langfuse && minio server --address ":9000" --console-address ":9001" /data'
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: miniosecret # CHANGEME
    ports:
      - 9090:9000
      - 127.0.0.1:9091:9001
    volumes:
      - ./db/langfuse_minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 1s
    networks:
      - luca-network

  redis:
    image: docker.io/redis:7
    restart: always
    # CHANGEME: row below to secure redis password
    command: >
      --requirepass ${REDIS_AUTH:-myredissecret}
    ports:
      - 127.0.0.1:6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 10s
      retries: 10
    networks:
      - luca-network

  postgres:
    image: docker.io/postgres:${POSTGRES_VERSION:-latest}
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 10
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - 127.0.0.1:5432:5432
    volumes:
      - ./db/postgres:/var/lib/postgresql/data
    networks:
      - luca-network

networks:
  luca-network:
    driver: bridge